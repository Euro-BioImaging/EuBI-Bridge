{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EuBI-Bridge EuBI-Bridge is a Python-based command line tool for distributed conversion of microscopy datasets into the OME-Zarr (v0.4) format with optional downscaling. A key feature of EuBI-Bridge is aggregative conversion , which concatenates multiple images along specified dimensions\u2014particularly useful for handling large datasets stored as file collections. EuBI-Bridge is built on several powerful libraries, including zarr , aicsimageio , dask-distributed , and rechunker , among others. While a variety of input file formats are supported, testing has so far primarily focused on TIFF files. Key Features Parallelised batch conversion Conversion with multi-dimensional concatenation Cluster-based conversion N-dimensional chunking N-dimensional downscaling OME-XML metadata export Installation EuBI-Bridge can be installed via conda: conda install -c euro-bioimaging -c conda-forge eubi-bridge \u2139\ufe0f EuBI-Bridge is currently only compatible with Python 3.10 due to conflicting dependencies. We are working on supporting a wider range of Python versions in future releases. Additional Notes EuBI-Bridge is in the alpha stage , and significant updates may be expected. Community support: Questions and contributions are welcome! Please report any issues.","title":"Home"},{"location":"#eubi-bridge","text":"EuBI-Bridge is a Python-based command line tool for distributed conversion of microscopy datasets into the OME-Zarr (v0.4) format with optional downscaling. A key feature of EuBI-Bridge is aggregative conversion , which concatenates multiple images along specified dimensions\u2014particularly useful for handling large datasets stored as file collections. EuBI-Bridge is built on several powerful libraries, including zarr , aicsimageio , dask-distributed , and rechunker , among others. While a variety of input file formats are supported, testing has so far primarily focused on TIFF files.","title":"EuBI-Bridge"},{"location":"#key-features","text":"Parallelised batch conversion Conversion with multi-dimensional concatenation Cluster-based conversion N-dimensional chunking N-dimensional downscaling OME-XML metadata export","title":"Key Features"},{"location":"#installation","text":"EuBI-Bridge can be installed via conda: conda install -c euro-bioimaging -c conda-forge eubi-bridge \u2139\ufe0f EuBI-Bridge is currently only compatible with Python 3.10 due to conflicting dependencies. We are working on supporting a wider range of Python versions in future releases.","title":"Installation"},{"location":"#additional-notes","text":"EuBI-Bridge is in the alpha stage , and significant updates may be expected. Community support: Questions and contributions are welcome! Please report any issues.","title":"Additional Notes"},{"location":"__cli/","text":"CLI Usage After the installation of EuBI-Bridge, the CLI command eubi is available globally. Quick start Examples: unary conversion Convert each file in the input_dir to an OME-Zarr container and saves it in the output_dir : eubi to_zarr /path/to/input_dir /path/to/output_dir Convert all files excluding those with thumbs in the filename: eubi to_zarr /path/to/input_dir /path/to/output_dir --excludes 'thumbs' Convert exclusively the tiff files from the input directory using wildcards: eubi to_zarr \"/path/to/input_dir/*tiff\" /path/to/output_dir Main commands eubi::to_zarr The conversion command eubi to_zarr supports unary and aggregative conversion with optional filtering, downscaling and metadata specification. The parameters described in the tables below can be directly supplied to the command eubi to_zarr . Non-configurable parameters These parameters have static defaults and cannot be configured, i.e., their values cannot be modified in the configuration file. In order to use a different value for any of these parameters, supply that value directly in the conversion command (see examples ). Argument Type Description input_path str or Path (mandatory) Path to input file or folder output_path str or Path (mandatory) Path to output Zarr directory --includes str Include filter for filenames --excludes str Exclude filter for filenames --series int BioFormats series index --time_tag str or tuple Time axis tag --channel_tag str or tuple Channel axis tag --z_tag str or tuple Z-dimension tag --y_tag str or tuple Y-dimension tag --x_tag str or tuple X-dimension tag --concatenation_axes int , tuple , or str Axes for concatenating datasets --time_scale int , float Temporal increment --z_scale int , float Z spatial increment --y_scale int , float Y spatial increment --x_scale int , float X spatial increment --time_unit str Temporal unit --z_unit str Z spatial unit --y_unit str Y spatial unit --x_unit str X spatial unit Examples Unary conversion Convert each file in the input_dir while overriding specific pixel metadata: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_scale 2.5 --z_unit micrometer --time_scale 1.5 --time_unit second This command overrides the z scaling metadata from the input files with the user-specified values. Aggregative conversion To perform aggregative conversion, one has to specify certain command line arguments to the to_zarr command: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_tag slice_ --concatenation_axes z This command will identify the indices of the z axis based on the pattern 'slice_' in the file paths (as specified with --z_tag ) and concatenate the files along the z axis (as specified with the --concatenation_axes ). Configurable parameters The parameters below can also be supplied to the command to_zarr similarly to the examples above. However, they can also be simply updated in the configuration file to avoid repetitively typing them for each conversion. See the configuration section for more details. Cluster parameters Argument Type Description --memory_limit str Maximum memory limit per Dask worker. --n_jobs int Number of Dask workers to launch. --no_distributed bool If True , disables distributed computation. --no_worker_restart bool If True , prevents restarting workers on failure. --on_slurm bool If True , executes computation on SLURM. --temp_dir str Temporary directory for Dask workers. --threads_per_worker int Number of threads per Dask worker. --verbose bool Enables verbose logging. Conversion parameters Parameter Type Description --compressor str Compression algorithm to use. --compressor_params dict Parameters passed to the compressor. --output_chunks list Chunk size configuration for output Zarr arrays. --overwrite bool Whether to overwrite existing Zarr data. --rechunk_method str Method used for rechunking data (e.g., p2p , rechunker ). --rechunkers_max_mem str Maximum memory for the rechunker tool. --trim_memory bool Whether to reduce memory usage during execution. --use_tensorstore bool Use TensorStore as the Zarr backend. --metadata_reader str Reader to extract metadata. --save_omexml bool Save OME-XML metadata alongside output. Downscale parameters Parameter Type Description --downscale_method str Downscaling algorithm (e.g., simple , mean , etc.). --n_layers int Number of downscaling layers to compute. --scale_factor list Scaling factors for each dimension. Examples Convert with 8 workers while limiting the maximum memory per worker: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_jobs 8 --memory_limit 10GB Set a specific output chunk size: eubi to_zarr /path/to/input_dir /path/to/output_dir --output_chunks 1,1,128,128,128 Set a specific number of layers, while also specifying the downscaling factors: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_layers 6 --scale_factor 1,1,2,3,3 Note: for more examples on to_zarr , refer to the tutorial page . Configuration Many of the parameters of EuBI-Bridge can be configured, i.e., their default values can be updated in the configuration file to avoid repetitively typing them for each conversion. eubi::configure_cluster Updates cluster configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' . Simple example eubi configure_cluster --memory_limit 10GB This command will set the default memory limit per worker to 10GB. Every time a conversion command is run, each worker will be set to a maximum of 10GB of memory. eubi::configure_conversion Updates conversion configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' . Simple example eubi configure_conversion --rechunk_method p2p This command will set the default rechunk method to p2p. eubi::configure_downscale Updates downscaling configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' . Simple example eubi configure_downscale --scale_factor 1,1,2,2,2 This will update the default value for the scale_factor to (1,1,2,2,2) in the tczyx order. eubi::reset_config Resets the cluster, conversion, and downscale parameters to the installation defaults. eubi::reset_dask_config Resets the dask.distributed configuration parameters to the installation defaults. eubi::show_config Displays the current cluster, conversion, and downscale parameters. eubi::show_dask_config Displays the current dask.distributed parameters. eubi::show_root_dask_defaults Displays the installation defaults for dask.distributed . eubi::show_root_defaults Displays the installation defaults for cluster, conversion, and downscale parameters.","title":"CLI Usage"},{"location":"__cli/#cli-usage","text":"After the installation of EuBI-Bridge, the CLI command eubi is available globally.","title":"CLI Usage"},{"location":"__cli/#quick-start","text":"Examples: unary conversion Convert each file in the input_dir to an OME-Zarr container and saves it in the output_dir : eubi to_zarr /path/to/input_dir /path/to/output_dir Convert all files excluding those with thumbs in the filename: eubi to_zarr /path/to/input_dir /path/to/output_dir --excludes 'thumbs' Convert exclusively the tiff files from the input directory using wildcards: eubi to_zarr \"/path/to/input_dir/*tiff\" /path/to/output_dir","title":"Quick start"},{"location":"__cli/#main-commands","text":"","title":"Main commands"},{"location":"__cli/#eubito_zarr","text":"The conversion command eubi to_zarr supports unary and aggregative conversion with optional filtering, downscaling and metadata specification. The parameters described in the tables below can be directly supplied to the command eubi to_zarr .","title":"eubi::to_zarr"},{"location":"__cli/#non-configurable-parameters","text":"These parameters have static defaults and cannot be configured, i.e., their values cannot be modified in the configuration file. In order to use a different value for any of these parameters, supply that value directly in the conversion command (see examples ). Argument Type Description input_path str or Path (mandatory) Path to input file or folder output_path str or Path (mandatory) Path to output Zarr directory --includes str Include filter for filenames --excludes str Exclude filter for filenames --series int BioFormats series index --time_tag str or tuple Time axis tag --channel_tag str or tuple Channel axis tag --z_tag str or tuple Z-dimension tag --y_tag str or tuple Y-dimension tag --x_tag str or tuple X-dimension tag --concatenation_axes int , tuple , or str Axes for concatenating datasets --time_scale int , float Temporal increment --z_scale int , float Z spatial increment --y_scale int , float Y spatial increment --x_scale int , float X spatial increment --time_unit str Temporal unit --z_unit str Z spatial unit --y_unit str Y spatial unit --x_unit str X spatial unit","title":"Non-configurable parameters"},{"location":"__cli/#examples","text":"Unary conversion Convert each file in the input_dir while overriding specific pixel metadata: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_scale 2.5 --z_unit micrometer --time_scale 1.5 --time_unit second This command overrides the z scaling metadata from the input files with the user-specified values. Aggregative conversion To perform aggregative conversion, one has to specify certain command line arguments to the to_zarr command: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_tag slice_ --concatenation_axes z This command will identify the indices of the z axis based on the pattern 'slice_' in the file paths (as specified with --z_tag ) and concatenate the files along the z axis (as specified with the --concatenation_axes ).","title":"Examples"},{"location":"__cli/#configurable-parameters","text":"The parameters below can also be supplied to the command to_zarr similarly to the examples above. However, they can also be simply updated in the configuration file to avoid repetitively typing them for each conversion. See the configuration section for more details.","title":"Configurable parameters"},{"location":"__cli/#cluster-parameters","text":"Argument Type Description --memory_limit str Maximum memory limit per Dask worker. --n_jobs int Number of Dask workers to launch. --no_distributed bool If True , disables distributed computation. --no_worker_restart bool If True , prevents restarting workers on failure. --on_slurm bool If True , executes computation on SLURM. --temp_dir str Temporary directory for Dask workers. --threads_per_worker int Number of threads per Dask worker. --verbose bool Enables verbose logging.","title":"Cluster parameters"},{"location":"__cli/#conversion-parameters","text":"Parameter Type Description --compressor str Compression algorithm to use. --compressor_params dict Parameters passed to the compressor. --output_chunks list Chunk size configuration for output Zarr arrays. --overwrite bool Whether to overwrite existing Zarr data. --rechunk_method str Method used for rechunking data (e.g., p2p , rechunker ). --rechunkers_max_mem str Maximum memory for the rechunker tool. --trim_memory bool Whether to reduce memory usage during execution. --use_tensorstore bool Use TensorStore as the Zarr backend. --metadata_reader str Reader to extract metadata. --save_omexml bool Save OME-XML metadata alongside output.","title":"Conversion parameters"},{"location":"__cli/#downscale-parameters","text":"Parameter Type Description --downscale_method str Downscaling algorithm (e.g., simple , mean , etc.). --n_layers int Number of downscaling layers to compute. --scale_factor list Scaling factors for each dimension.","title":"Downscale parameters"},{"location":"__cli/#examples_1","text":"Convert with 8 workers while limiting the maximum memory per worker: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_jobs 8 --memory_limit 10GB Set a specific output chunk size: eubi to_zarr /path/to/input_dir /path/to/output_dir --output_chunks 1,1,128,128,128 Set a specific number of layers, while also specifying the downscaling factors: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_layers 6 --scale_factor 1,1,2,3,3 Note: for more examples on to_zarr , refer to the tutorial page .","title":"Examples"},{"location":"__cli/#configuration","text":"Many of the parameters of EuBI-Bridge can be configured, i.e., their default values can be updated in the configuration file to avoid repetitively typing them for each conversion.","title":"Configuration"},{"location":"__cli/#eubiconfigure_cluster","text":"Updates cluster configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' .","title":"eubi::configure_cluster"},{"location":"__cli/#simple-example","text":"eubi configure_cluster --memory_limit 10GB This command will set the default memory limit per worker to 10GB. Every time a conversion command is run, each worker will be set to a maximum of 10GB of memory.","title":"Simple example"},{"location":"__cli/#eubiconfigure_conversion","text":"Updates conversion configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' .","title":"eubi::configure_conversion"},{"location":"__cli/#simple-example_1","text":"eubi configure_conversion --rechunk_method p2p This command will set the default rechunk method to p2p.","title":"Simple example"},{"location":"__cli/#eubiconfigure_downscale","text":"Updates downscaling configuration settings. Any of the cluster parameters from the respective table can be configured. To update the current default value for a parameter, provide that parameter with a value other than 'default' .","title":"eubi::configure_downscale"},{"location":"__cli/#simple-example_2","text":"eubi configure_downscale --scale_factor 1,1,2,2,2 This will update the default value for the scale_factor to (1,1,2,2,2) in the tczyx order.","title":"Simple example"},{"location":"__cli/#eubireset_config","text":"Resets the cluster, conversion, and downscale parameters to the installation defaults.","title":"eubi::reset_config"},{"location":"__cli/#eubireset_dask_config","text":"Resets the dask.distributed configuration parameters to the installation defaults.","title":"eubi::reset_dask_config"},{"location":"__cli/#eubishow_config","text":"Displays the current cluster, conversion, and downscale parameters.","title":"eubi::show_config"},{"location":"__cli/#eubishow_dask_config","text":"Displays the current dask.distributed parameters.","title":"eubi::show_dask_config"},{"location":"__cli/#eubishow_root_dask_defaults","text":"Displays the installation defaults for dask.distributed .","title":"eubi::show_root_dask_defaults"},{"location":"__cli/#eubishow_root_defaults","text":"Displays the installation defaults for cluster, conversion, and downscale parameters.","title":"eubi::show_root_defaults"},{"location":"cli/","text":"CLI Usage After installing EuBI-Bridge , the CLI command eubi becomes globally available. Quick Start Unary vs aggregative conversion Unary conversion: conversion of each input file to a single output OME-Zarr container. Aggregative conversion: conversion that concatenates multiple input files along user-specified dimensions. Below are examples for both of these conversion modes: Examples Simple unary conversion: Convert each file in input_dir into an OME-Zarr container, saving the result in output_dir : eubi to_zarr /path/to/input_dir /path/to/output_dir Excluding files: Exclude files with thumbs in the filename: eubi to_zarr /path/to/input_dir /path/to/output_dir --excludes 'thumbs' Wildcard filtering: Convert only tiff files using wildcards: eubi to_zarr \"/path/to/input_dir/*tiff\" /path/to/output_dir Aggregative conversion: Perform an aggregative conversion that concatenates input files along the z axis: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_tag slice_ --concatenation_axes z Note that the pattern corresponding to the z axis is provided to the command via the --z_tag and the concatenation is activated by supplying --concatenation_axes . \u2139\ufe0f To better understand aggregative conversion, see the conversion tutorial . Main Commands eubi to_zarr Performs data conversion from supported input formats (including most BioFormats-compatible formats) to OME-Zarr. It supports both unary and aggregative conversion modes, with options for filtering, metadata specification, downscaling, and distributed processing. Non-configurable Parameters These must be provided directly via the CLI: Argument Type Description input_path str or Path (mandatory) Path to input file or folder output_path str or Path (mandatory) Path to output Zarr directory --includes str Include filter for filenames --excludes str Exclude filter for filenames --series int BioFormats series index --time_tag str or tuple Time dimension tag --channel_tag str or tuple Channel dimension tag --z_tag str or tuple Z-dimension tag --y_tag str or tuple Y-dimension tag --x_tag str or tuple X-dimension tag --concatenation_axes int , tuple , or str Axes for concatenating datasets --time_scale int , float Temporal increment --z_scale int , float Z spatial increment --y_scale int , float Y spatial increment --x_scale int , float X spatial increment --time_unit str Temporal unit --z_unit str Z spatial unit --y_unit str Y spatial unit --x_unit str X spatial unit Examples Override metadata for unary conversion: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_scale 2.5 --z_unit micrometer --time_scale 1.5 --time_unit second Perform aggregative conversion along the time and channel axes: eubi to_zarr /path/to/input_dir /path/to/output_dir --time_tag T --channel_tag Channel --concatenation_axes tc \u2139\ufe0f Tag arguments corresponding to the axes tczyx are: --time_tag , --channel_tag , --z_tag --y_tag , --x_tag , respectively. \u2139\ufe0f To better understand aggregative conversion, see the conversion tutorial . Configurable Parameters These can be passed via CLI or stored in the configuration file. Cluster Parameters Argument Type Description --memory_limit str Maximum memory per Dask worker --n_jobs int Number of Dask workers --no_distributed bool Disable distributed computation --no_worker_restart bool Prevent automatic worker restarts on failure --on_slurm bool Enable SLURM-based execution --temp_dir str Temporary directory for Dask --threads_per_worker int Threads per worker --verbose bool Enable verbose logging Conversion Parameters Parameter Type Description --compressor str Compression algorithm --compressor_params dict Compressor parameters --output_chunks list Output Zarr chunk size --overwrite bool Overwrite existing Zarr data --rechunk_method str Rechunking method ( tasks , p2p or rechunker ) --rechunkers_max_mem str Max memory for rechunker --trim_memory bool Reduce memory usage --use_tensorstore bool Use TensorStore backend for writing --metadata_reader str Metadata extraction method ( bfio or aicsimageio ) --save_omexml bool Save OME-XML metadata Downscale Parameters Parameter Type Description --downscale_method str Downscale algorithm ( simple , mean , etc.) --n_layers int Number of downscaling layers --scale_factor list Scaling factors in each dimension Examples Run with 8 workers and limit memory per worker: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_jobs 8 --memory_limit 10GB Specify output chunk size: eubi to_zarr /path/to/input_dir /path/to/output_dir --output_chunks 1,1,128,128,128 Specify downscaling layers and scale factor: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_layers 6 --scale_factor 1,1,3,3,3 \u2139\ufe0f For more examples, see the conversion tutorial . Configuration Commands eubi configure_cluster Set cluster defaults using any of the cluster parameters . Example eubi configure_cluster --memory_limit 10GB eubi configure_conversion Set conversion defaults using any of the conversion parameters . Example eubi configure_conversion --rechunk_method p2p eubi configure_downscale Set downscale defaults using any of the downscale parameters . Example eubi configure_downscale --scale_factor 1,1,2,2,2 Reset and Inspect Configuration Command Description eubi reset_config Reset cluster/conversion/downscale parameters to installation defaults eubi reset_dask_config Reset the dask.distributed settings eubi show_config Show current cluster/conversion/downscale settings eubi show_dask_config Show current Dask configuration eubi show_root_defaults Show installation defaults for cluster/conversion/downscale parameters eubi show_root_dask_defaults Show installation defaults for Dask parameters","title":"CLI Usage"},{"location":"cli/#cli-usage","text":"After installing EuBI-Bridge , the CLI command eubi becomes globally available.","title":"CLI Usage"},{"location":"cli/#quick-start","text":"","title":"Quick Start"},{"location":"cli/#unary-vs-aggregative-conversion","text":"Unary conversion: conversion of each input file to a single output OME-Zarr container. Aggregative conversion: conversion that concatenates multiple input files along user-specified dimensions. Below are examples for both of these conversion modes:","title":"Unary vs aggregative conversion"},{"location":"cli/#examples","text":"Simple unary conversion: Convert each file in input_dir into an OME-Zarr container, saving the result in output_dir : eubi to_zarr /path/to/input_dir /path/to/output_dir Excluding files: Exclude files with thumbs in the filename: eubi to_zarr /path/to/input_dir /path/to/output_dir --excludes 'thumbs' Wildcard filtering: Convert only tiff files using wildcards: eubi to_zarr \"/path/to/input_dir/*tiff\" /path/to/output_dir Aggregative conversion: Perform an aggregative conversion that concatenates input files along the z axis: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_tag slice_ --concatenation_axes z Note that the pattern corresponding to the z axis is provided to the command via the --z_tag and the concatenation is activated by supplying --concatenation_axes . \u2139\ufe0f To better understand aggregative conversion, see the conversion tutorial .","title":"Examples"},{"location":"cli/#main-commands","text":"","title":"Main Commands"},{"location":"cli/#eubi-to_zarr","text":"Performs data conversion from supported input formats (including most BioFormats-compatible formats) to OME-Zarr. It supports both unary and aggregative conversion modes, with options for filtering, metadata specification, downscaling, and distributed processing.","title":"eubi to_zarr"},{"location":"cli/#non-configurable-parameters","text":"These must be provided directly via the CLI: Argument Type Description input_path str or Path (mandatory) Path to input file or folder output_path str or Path (mandatory) Path to output Zarr directory --includes str Include filter for filenames --excludes str Exclude filter for filenames --series int BioFormats series index --time_tag str or tuple Time dimension tag --channel_tag str or tuple Channel dimension tag --z_tag str or tuple Z-dimension tag --y_tag str or tuple Y-dimension tag --x_tag str or tuple X-dimension tag --concatenation_axes int , tuple , or str Axes for concatenating datasets --time_scale int , float Temporal increment --z_scale int , float Z spatial increment --y_scale int , float Y spatial increment --x_scale int , float X spatial increment --time_unit str Temporal unit --z_unit str Z spatial unit --y_unit str Y spatial unit --x_unit str X spatial unit","title":"Non-configurable Parameters"},{"location":"cli/#examples_1","text":"Override metadata for unary conversion: eubi to_zarr /path/to/input_dir /path/to/output_dir --z_scale 2.5 --z_unit micrometer --time_scale 1.5 --time_unit second Perform aggregative conversion along the time and channel axes: eubi to_zarr /path/to/input_dir /path/to/output_dir --time_tag T --channel_tag Channel --concatenation_axes tc \u2139\ufe0f Tag arguments corresponding to the axes tczyx are: --time_tag , --channel_tag , --z_tag --y_tag , --x_tag , respectively. \u2139\ufe0f To better understand aggregative conversion, see the conversion tutorial .","title":"Examples"},{"location":"cli/#configurable-parameters","text":"These can be passed via CLI or stored in the configuration file.","title":"Configurable Parameters"},{"location":"cli/#cluster-parameters","text":"Argument Type Description --memory_limit str Maximum memory per Dask worker --n_jobs int Number of Dask workers --no_distributed bool Disable distributed computation --no_worker_restart bool Prevent automatic worker restarts on failure --on_slurm bool Enable SLURM-based execution --temp_dir str Temporary directory for Dask --threads_per_worker int Threads per worker --verbose bool Enable verbose logging","title":"Cluster Parameters"},{"location":"cli/#conversion-parameters","text":"Parameter Type Description --compressor str Compression algorithm --compressor_params dict Compressor parameters --output_chunks list Output Zarr chunk size --overwrite bool Overwrite existing Zarr data --rechunk_method str Rechunking method ( tasks , p2p or rechunker ) --rechunkers_max_mem str Max memory for rechunker --trim_memory bool Reduce memory usage --use_tensorstore bool Use TensorStore backend for writing --metadata_reader str Metadata extraction method ( bfio or aicsimageio ) --save_omexml bool Save OME-XML metadata","title":"Conversion Parameters"},{"location":"cli/#downscale-parameters","text":"Parameter Type Description --downscale_method str Downscale algorithm ( simple , mean , etc.) --n_layers int Number of downscaling layers --scale_factor list Scaling factors in each dimension","title":"Downscale Parameters"},{"location":"cli/#examples_2","text":"Run with 8 workers and limit memory per worker: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_jobs 8 --memory_limit 10GB Specify output chunk size: eubi to_zarr /path/to/input_dir /path/to/output_dir --output_chunks 1,1,128,128,128 Specify downscaling layers and scale factor: eubi to_zarr /path/to/input_dir /path/to/output_dir --n_layers 6 --scale_factor 1,1,3,3,3 \u2139\ufe0f For more examples, see the conversion tutorial .","title":"Examples"},{"location":"cli/#configuration-commands","text":"","title":"Configuration Commands"},{"location":"cli/#eubi-configure_cluster","text":"Set cluster defaults using any of the cluster parameters .","title":"eubi configure_cluster"},{"location":"cli/#example","text":"eubi configure_cluster --memory_limit 10GB","title":"Example"},{"location":"cli/#eubi-configure_conversion","text":"Set conversion defaults using any of the conversion parameters .","title":"eubi configure_conversion"},{"location":"cli/#example_1","text":"eubi configure_conversion --rechunk_method p2p","title":"Example"},{"location":"cli/#eubi-configure_downscale","text":"Set downscale defaults using any of the downscale parameters .","title":"eubi configure_downscale"},{"location":"cli/#example_2","text":"eubi configure_downscale --scale_factor 1,1,2,2,2","title":"Example"},{"location":"cli/#reset-and-inspect-configuration","text":"Command Description eubi reset_config Reset cluster/conversion/downscale parameters to installation defaults eubi reset_dask_config Reset the dask.distributed settings eubi show_config Show current cluster/conversion/downscale settings eubi show_dask_config Show current Dask configuration eubi show_root_defaults Show installation defaults for cluster/conversion/downscale parameters eubi show_root_dask_defaults Show installation defaults for Dask parameters","title":"Reset and Inspect Configuration"},{"location":"conversion_tutorial/","text":"Tutorial Welcome to the EuBI-Bridge conversion tutorial. Here we demonstrate how to convert batches of image datasets to OME-Zarr using the EuBI-Bridge CLI. EuBI-Bridge supports two different conversion modes: unary (one-to-one) and aggregative (multiple-to-one) conversion. Unary conversion converts each input file to a single OME-Zarr container, whereas aggregative conversion concatenates input images along specified dimensions. Below we explain each of these modes with examples. Unary Conversion Given a dataset structured as follows: multichannel_timeseries \u251c\u2500\u2500 Channel1-T0001.tif \u251c\u2500\u2500 Channel1-T0002.tif \u251c\u2500\u2500 Channel1-T0003.tif \u251c\u2500\u2500 Channel1-T0004.tif \u251c\u2500\u2500 Channel2-T0001.tif \u251c\u2500\u2500 Channel2-T0002.tif \u251c\u2500\u2500 Channel2-T0003.tif \u2514\u2500\u2500 Channel2-T0004.tif To convert each TIFF into a separate OME-Zarr container (unary conversion): eubi to_zarr multichannel_timeseries multichannel_timeseries_zarr This produces: multichannel_timeseries_zarr \u251c\u2500\u2500 Channel1-T0001.zarr \u251c\u2500\u2500 Channel1-T0002.zarr \u251c\u2500\u2500 Channel1-T0003.zarr \u251c\u2500\u2500 Channel1-T0004.zarr \u251c\u2500\u2500 Channel2-T0001.zarr \u251c\u2500\u2500 Channel2-T0002.zarr \u251c\u2500\u2500 Channel2-T0003.zarr \u2514\u2500\u2500 Channel2-T0004.zarr Use wildcards to specifically convert the images belonging to Channel1: eubi to_zarr \"multichannel_timeseries/Channel1*\" multichannel_timeseries_channel1_zarr This produces: multichannel_timeseries_zarr \u251c\u2500\u2500 Channel1-T0001.zarr \u251c\u2500\u2500 Channel1-T0002.zarr \u251c\u2500\u2500 Channel1-T0003.zarr \u2514\u2500\u2500 Channel1-T0004.zarr Aggregative Conversion (Concatenation Along Dimensions) To concatenate images along specific dimensions, EuBI-Bridge needs to be informed of file patterns that specify image dimensions. For this example, the file pattern for the channel dimension is Channel , which is followed by the channel index, and the file pattern for the time dimension is T , which is followed by the time index. To concatenate along the time dimension: eubi to_zarr multichannel_timeseries multichannel_timeseries_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes t Output: multichannel_timeseries_time-concat_zarr \u251c\u2500\u2500 Channel1-T_tset.zarr \u2514\u2500\u2500 Channel2-T_tset.zarr Important note: if the --channel_tag was not provided, the tool would not be aware of the multiple channels in the image and try to concatenate all images into a single one-channeled OME-Zarr. Therefore, when an aggregative conversion is performed, all dimensions existing in the input files must be specified via their respective tags. For multidimensional concatenation ( channel + time ): eubi to_zarr multichannel_timeseries multichannel_timeseries_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes ct Note that both axes are specified via the argument --concatenation_axes ct . Output: multichannel_timeseries_concat_zarr \u2514\u2500\u2500 Channel_cset-T_tset.zarr Handling Nested Directories For datasets stored in nested directories such as: multichannel_timeseries_nested \u251c\u2500\u2500 Channel1 \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif \u251c\u2500\u2500 Channel2 \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif EuBI-Bridge automatically detects the nested structure. To concatenate along both channel and time dimensions: eubi to_zarr multichannel_timeseries_nested multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes ct Output: multichannel_timeseries_nested_concat_zarr \u2514\u2500\u2500 Channel_cset-T_tset.zarr To concatenate along the channel dimension only: eubi to_zarr multichannel_timeseries_nested multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes c Output: multichannel_timeseries_nested_concat_zarr \u251c\u2500\u2500 Channel_cset-T0001.zarr \u251c\u2500\u2500 Channel_cset-T0002.zarr \u251c\u2500\u2500 Channel_cset-T0003.zarr \u2514\u2500\u2500 Channel_cset-T0004.zarr Selective Data Conversion To recursively select specific files for conversion, wildcard patterns can be used. For example, to concatenate only timepoint 3 along the channel dimension: eubi to_zarr \"multichannel_timeseries_nested/**/*T0003*\" multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes c Output: multichannel_timeseries_nested_concat_zarr \u2514\u2500\u2500 Channel_cset-T0003.zarr Note: When using wildcards, the input directory path must be enclosed in quotes as shown in the example above. Handling Categorical Dimension Patterns For datasets where channel names are categorical such as in: blueredchannel_timeseries \u251c\u2500\u2500 Blue-T0001.tif \u251c\u2500\u2500 Blue-T0002.tif \u251c\u2500\u2500 Blue-T0003.tif \u251c\u2500\u2500 Blue-T0004.tif \u251c\u2500\u2500 Red-T0001.tif \u251c\u2500\u2500 Red-T0002.tif \u251c\u2500\u2500 Red-T0003.tif \u2514\u2500\u2500 Red-T0004.tif Specify categorical names as a comma-separated list: eubi to_zarr blueredchannels_timeseries blueredchannels_timeseries_concat_zarr --channel_tag Blue,Red --time_tag T --concatenation_axes ct Output: blueredchannels_timeseries_concat_zarr \u2514\u2500\u2500 BlueRed_cset-T_tset.zarr Note that the categorical names are aggregated in the output OME-Zarr name. With nested input structure such as in: blueredchannels_timeseries_nested \u251c\u2500\u2500 Blue \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif \u251c\u2500\u2500 Red \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif One can run the exact same command: eubi to_zarr blueredchannels_timeseries_nested blueredchannels_timeseries_nested_concat_zarr --channel_tag Blue,Red --time_tag T --concatenation_axes ct Output: blueredchannels_timeseries_nested_concat_zarr \u2514\u2500\u2500 BlueRed_cset-T_tset.zarr","title":"Conversion Tutorial"},{"location":"conversion_tutorial/#tutorial","text":"Welcome to the EuBI-Bridge conversion tutorial. Here we demonstrate how to convert batches of image datasets to OME-Zarr using the EuBI-Bridge CLI. EuBI-Bridge supports two different conversion modes: unary (one-to-one) and aggregative (multiple-to-one) conversion. Unary conversion converts each input file to a single OME-Zarr container, whereas aggregative conversion concatenates input images along specified dimensions. Below we explain each of these modes with examples.","title":"Tutorial"},{"location":"conversion_tutorial/#unary-conversion","text":"Given a dataset structured as follows: multichannel_timeseries \u251c\u2500\u2500 Channel1-T0001.tif \u251c\u2500\u2500 Channel1-T0002.tif \u251c\u2500\u2500 Channel1-T0003.tif \u251c\u2500\u2500 Channel1-T0004.tif \u251c\u2500\u2500 Channel2-T0001.tif \u251c\u2500\u2500 Channel2-T0002.tif \u251c\u2500\u2500 Channel2-T0003.tif \u2514\u2500\u2500 Channel2-T0004.tif To convert each TIFF into a separate OME-Zarr container (unary conversion): eubi to_zarr multichannel_timeseries multichannel_timeseries_zarr This produces: multichannel_timeseries_zarr \u251c\u2500\u2500 Channel1-T0001.zarr \u251c\u2500\u2500 Channel1-T0002.zarr \u251c\u2500\u2500 Channel1-T0003.zarr \u251c\u2500\u2500 Channel1-T0004.zarr \u251c\u2500\u2500 Channel2-T0001.zarr \u251c\u2500\u2500 Channel2-T0002.zarr \u251c\u2500\u2500 Channel2-T0003.zarr \u2514\u2500\u2500 Channel2-T0004.zarr Use wildcards to specifically convert the images belonging to Channel1: eubi to_zarr \"multichannel_timeseries/Channel1*\" multichannel_timeseries_channel1_zarr This produces: multichannel_timeseries_zarr \u251c\u2500\u2500 Channel1-T0001.zarr \u251c\u2500\u2500 Channel1-T0002.zarr \u251c\u2500\u2500 Channel1-T0003.zarr \u2514\u2500\u2500 Channel1-T0004.zarr","title":"Unary Conversion"},{"location":"conversion_tutorial/#aggregative-conversion-concatenation-along-dimensions","text":"To concatenate images along specific dimensions, EuBI-Bridge needs to be informed of file patterns that specify image dimensions. For this example, the file pattern for the channel dimension is Channel , which is followed by the channel index, and the file pattern for the time dimension is T , which is followed by the time index. To concatenate along the time dimension: eubi to_zarr multichannel_timeseries multichannel_timeseries_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes t Output: multichannel_timeseries_time-concat_zarr \u251c\u2500\u2500 Channel1-T_tset.zarr \u2514\u2500\u2500 Channel2-T_tset.zarr Important note: if the --channel_tag was not provided, the tool would not be aware of the multiple channels in the image and try to concatenate all images into a single one-channeled OME-Zarr. Therefore, when an aggregative conversion is performed, all dimensions existing in the input files must be specified via their respective tags. For multidimensional concatenation ( channel + time ): eubi to_zarr multichannel_timeseries multichannel_timeseries_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes ct Note that both axes are specified via the argument --concatenation_axes ct . Output: multichannel_timeseries_concat_zarr \u2514\u2500\u2500 Channel_cset-T_tset.zarr","title":"Aggregative Conversion (Concatenation Along Dimensions)"},{"location":"conversion_tutorial/#handling-nested-directories","text":"For datasets stored in nested directories such as: multichannel_timeseries_nested \u251c\u2500\u2500 Channel1 \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif \u251c\u2500\u2500 Channel2 \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif EuBI-Bridge automatically detects the nested structure. To concatenate along both channel and time dimensions: eubi to_zarr multichannel_timeseries_nested multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes ct Output: multichannel_timeseries_nested_concat_zarr \u2514\u2500\u2500 Channel_cset-T_tset.zarr To concatenate along the channel dimension only: eubi to_zarr multichannel_timeseries_nested multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes c Output: multichannel_timeseries_nested_concat_zarr \u251c\u2500\u2500 Channel_cset-T0001.zarr \u251c\u2500\u2500 Channel_cset-T0002.zarr \u251c\u2500\u2500 Channel_cset-T0003.zarr \u2514\u2500\u2500 Channel_cset-T0004.zarr","title":"Handling Nested Directories"},{"location":"conversion_tutorial/#selective-data-conversion","text":"To recursively select specific files for conversion, wildcard patterns can be used. For example, to concatenate only timepoint 3 along the channel dimension: eubi to_zarr \"multichannel_timeseries_nested/**/*T0003*\" multichannel_timeseries_nested_concat_zarr --channel_tag Channel --time_tag T --concatenation_axes c Output: multichannel_timeseries_nested_concat_zarr \u2514\u2500\u2500 Channel_cset-T0003.zarr Note: When using wildcards, the input directory path must be enclosed in quotes as shown in the example above.","title":"Selective Data Conversion"},{"location":"conversion_tutorial/#handling-categorical-dimension-patterns","text":"For datasets where channel names are categorical such as in: blueredchannel_timeseries \u251c\u2500\u2500 Blue-T0001.tif \u251c\u2500\u2500 Blue-T0002.tif \u251c\u2500\u2500 Blue-T0003.tif \u251c\u2500\u2500 Blue-T0004.tif \u251c\u2500\u2500 Red-T0001.tif \u251c\u2500\u2500 Red-T0002.tif \u251c\u2500\u2500 Red-T0003.tif \u2514\u2500\u2500 Red-T0004.tif Specify categorical names as a comma-separated list: eubi to_zarr blueredchannels_timeseries blueredchannels_timeseries_concat_zarr --channel_tag Blue,Red --time_tag T --concatenation_axes ct Output: blueredchannels_timeseries_concat_zarr \u2514\u2500\u2500 BlueRed_cset-T_tset.zarr Note that the categorical names are aggregated in the output OME-Zarr name. With nested input structure such as in: blueredchannels_timeseries_nested \u251c\u2500\u2500 Blue \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif \u251c\u2500\u2500 Red \u2502 \u251c\u2500\u2500 T0001.tif \u2502 \u251c\u2500\u2500 T0002.tif \u2502 \u251c\u2500\u2500 T0003.tif \u2502 \u251c\u2500\u2500 T0004.tif One can run the exact same command: eubi to_zarr blueredchannels_timeseries_nested blueredchannels_timeseries_nested_concat_zarr --channel_tag Blue,Red --time_tag T --concatenation_axes ct Output: blueredchannels_timeseries_nested_concat_zarr \u2514\u2500\u2500 BlueRed_cset-T_tset.zarr","title":"Handling Categorical Dimension Patterns"}]}